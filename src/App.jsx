import './App.css'
import Button from './component/button.jsx'
import { button } from './src.js'
import Poisk from './component/poisk.jsx'
import Profile from './component/profile.jsx'
import original from './assets/original.png'
import strellka from './assets/strellka.svg'
import { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { fetchPopularGames } from './api.js'

// URL –¥–ª—è Node.js API
const NODE_API_URL = 'http://localhost:3002/api';

function App() {
  const navigate = useNavigate();
  const [currentPage, setCurrentPage] = useState(0);
  const [isTransitioning, setIsTransitioning] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [user, setUser] = useState(null);
  const [games, setGames] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleLogin = (userData) => {
    setIsLoggedIn(true);
    setUser(userData);
    localStorage.setItem('user', JSON.stringify(userData));
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
  const handleLogout = () => {
    setIsLoggedIn(false);
    setUser(null);
    localStorage.removeItem('user');
  };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–≥—Ä—ã
  useEffect(() => {
    const savedUser = localStorage.getItem('user');
    if (savedUser) {
      setIsLoggedIn(true);
      setUser(JSON.parse(savedUser));
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–≥—Ä
    const loadPopularGames = async () => {
      try {
        setLoading(true);
        const popularGames = await fetchPopularGames();
        setGames(popularGames || []);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–≥—Ä:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–≥—Ä—ã');
        setGames([]);
      } finally {
        setLoading(false);
      }
    };
    
    loadPopularGames();
  }, []);
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–≥—Ä—ã –ø–æ 4 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
  const gamesPerPage = 4;
  const totalPages = Math.ceil(games.length / gamesPerPage);
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const getCurrentPageGames = () => {
    const startIndex = currentPage * gamesPerPage;
    return games.slice(startIndex, startIndex + gamesPerPage);
  };
  
  const handlePageChange = (newPage) => {
    if (isTransitioning) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–ª–∏–∫–∏ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
    
    setIsTransitioning(true);
    setTimeout(() => {
      setCurrentPage(newPage);
      setTimeout(() => {
        setIsTransitioning(false);
      }, 100);
    }, 300);
  };
  
  const handleNextClick = () => {
    const newPage = (currentPage + 1) % totalPages;
    handlePageChange(newPage);
  };

  const handlePrevClick = () => {
    const newPage = (currentPage - 1 + totalPages) % totalPages;
    handlePageChange(newPage);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä—ã –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–ª–∏–∫–æ–≤
  const handleGameClick = (gameId) => {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    fetch(`${NODE_API_URL}/games/${gameId}/click`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    })
    .then(response => response.json())
    .then(data => {
      console.log('–ö–ª–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', data);
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–∫–∞
      navigate(`/game?id=${gameId}`);
    })
    .catch(error => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–∫–∞:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä—ã
      navigate(`/game?id=${gameId}`);
    });
  };

  return (
    <>
      <div className="header-container">
        <img src={original} alt="logo" className='logo' onClick={() => navigate('/')} style={{cursor: 'pointer'}} />
        <div className="button-container">
          <Button text={button[0].text} href={button[0].href} />
          <Button text={button[1].text} href={button[1].href} className="right-button" />
          <Button text={button[2].text} href={button[2].href} className="right-button" isRandomGame={button[2].isRandomGame} />
        </div>
        <div className="search-wrapper">
          <Poisk />
          <Profile isLoggedIn={isLoggedIn} user={user} onLogout={handleLogout} />
        </div>
      </div>
      <hr className='line'></hr>
      <div className="replacement-block">
        <h2 className="popular-games-title">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–≥—Ä—ã</h2>
        {loading ? (
          <div className="loading-games">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–≥—Ä...</div>
        ) : error ? (
          <div className="error-message">{error}</div>
        ) : games.length === 0 ? (
          <div className="no-games-message">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–≥—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –î–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥.</div>
        ) : (
          <div className={`games-grid ${isTransitioning ? 'fade-out' : 'fade-in'}`}>
            {getCurrentPageGames().map((game) => (
              <div key={game.id} className="game-card-container" onClick={() => handleGameClick(game.id)}>
                <div className="game-indicator">
                  <div className="game-title-bar">
                    {game.name || game.title}
                    {game.clicks && <span className="game-clicks">üëÅ {game.clicks}</span>}
                  </div>
                  <div className='game-indicator-foto'>
                    <img 
                      src={game.image} 
                      alt={game.name || game.title} 
                      className='foto single-foto'
                      onError={(e) => {
                        e.target.onerror = null;
                        e.target.src = "/images/no-image.svg";
                      }}
                    />
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
        <button className="nav-arrow nav-arrow-left" onClick={handlePrevClick} disabled={isTransitioning} aria-label="–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞">
          <img src={strellka} alt="–ù–∞–∑–∞–¥" className="arrow-icon arrow-left" />
        </button>
        <button className="nav-arrow nav-arrow-right" onClick={handleNextClick} disabled={isTransitioning} aria-label="–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞">
          <img src={strellka} alt="–í–ø–µ—Ä–µ–¥" className="arrow-icon arrow-right" />
        </button>
        <div className="pagination">
          {Array.from({ length: totalPages }).map((_, index) => (
            <span key={index} className={`pagination-dot ${index === currentPage ? 'active' : ''}`} onClick={() => handlePageChange(index)}></span>
          ))}
        </div>
      </div>
    </>
  )
}

export default App
